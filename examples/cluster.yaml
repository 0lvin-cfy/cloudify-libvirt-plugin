# before use:
# * cat examples/cluster/id_rsa.pub | ssh <cluster_user>@<cluster_host> "mkdir -p ~/.ssh && chmod 700 ~/.ssh && cat >>  ~/.ssh/authorized_keys"
# * and set cluster_key to examples/cluster/id_rsa
tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.3.1/types.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.5.1/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-incubator/cloudify-utilities-plugin/1.7.1/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-incubator/cloudify-libvirt-plugin/0.4/plugin.yaml

inputs:

  cluster_user:
    type: string
    description: >
      Cluster user name.

  cluster_key:
    type: string
    description: >
      SSH key for cluster user.

  cluster_host:
    type: string
    description: >
      LibVirt computer ip address.

  external_ip:
    type: string
    description: >
      List external ip's separated by comma.

  external_dev:
    type: string
    description: >
      Device with external access (same device as used for cluster_host ip)

relationships:

  vm_connected_to_storage:
    derived_from: cloudify.relationships.contained_in
    target_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        preconfigure:
          implementation: scripts/vm_preconfigure.py
          executor: central_deployment_agent
          inputs: {}

node_templates:

  libvirt_install:
    type: cloudify.nodes.WebServer
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            fabric_env: &fab_env
              user: { get_input: cluster_user }
              key_filename: { get_input: cluster_key }
              host_string: { get_input: cluster_host }
            script_path: cluster/libvirt_install.sh
        configure:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            fabric_env: *fab_env
            script_path: cluster/download_vm.sh
            CATALOG_URL: https://buildlogs.centos.org/centos/7/isos/x86_64
            DISK: CentOS-7-x86_64-GenericCloud-ContainerHost.qcow2

  common_network:
    type: cloudify.libvirt.network
    properties:
      libvirt_auth: {concat:["qemu+ssh://", { get_input: cluster_user }, "@", { get_input: cluster_host }, "/system?sshauth=privkey&keyfile=", { get_input: cluster_key }]}
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            params:
              dev: virbr1
              forwards:
                - mode: nat
              ips:
                - address: 192.168.142.1
                  netmask: 255.255.255.0
                  dhcp:
                    start: 192.168.142.2
                    end: 192.168.142.254
    relationships:
    - target: libvirt_install
      type: cloudify.relationships.depends_on

  disk_clone:
    type: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            fabric_env: *fab_env
            DISK: { get_attribute: [libvirt_install, vm_image] }
            script_path: cluster/copy_disk.sh
        delete:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            fabric_env: *fab_env
            script_path: scripts/remove_disk.sh
    relationships:
    - target: libvirt_install
      type: cloudify.relationships.depends_on

  qemu_vm:
    type: cloudify.libvirt.domain
    properties:
      libvirt_auth: {concat:["qemu+ssh://", { get_input: cluster_user }, "@", { get_input: cluster_host }, "/system?sshauth=privkey&keyfile=", { get_input: cluster_key }]}
      agent_config:
        install_method: none
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            params:
              vcpu: 2
              memory_size: 1048576
              networks:
                - network: { get_attribute: [common_network, resource_id] }
                  dev: vnet0
    relationships:
      - target: common_network
        type: cloudify.libvirt.relationships.connected_to
      - target: disk_clone
        type: vm_connected_to_storage

  floating_ip:
    type: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            fabric_env: *fab_env
            EXTERNAL_INTERFACE: { get_input: external_dev }
            EXTERNAL_IP: { get_input: external_ip }
            INTERNAL_IP: { get_attribute: [qemu_vm, ip] }
            script_path: cluster/floating_ip.py
        delete:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            fabric_env: *fab_env
            script_path: cluster/floating_ip_delete.py
    relationships:
    - target: qemu_vm
      type: cloudify.relationships.depends_on

  example_node:
    type: cloudify.nodes.WebServer
    interfaces:
      cloudify.interfaces.lifecycle:
          start:
            implementation: terminal.cloudify_terminal.tasks.run
            inputs:
              terminal_auth:
                user: centos
                password: passw0rd
                ip: { get_attribute: [floating_ip, external_ip] }
              calls:
              - action: uname -a
    relationships:
      - target: floating_ip
        type: cloudify.relationships.contained_in
