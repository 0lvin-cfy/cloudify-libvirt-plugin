tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.5/types.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.5.1/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-incubator/cloudify-utilities-plugin/1.9.5/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-incubator/cloudify-libvirt-plugin/0.7.0/plugin.yaml

inputs:
  # agent settings
  agent_user:
    default: { get_secret: agent_user }

  # you should use such key for kvm host
  agent_public_key:
    default: { get_secret: agent_key_public }

  disk_size:
    default: 24GB

  agent_key_private:
    default: { get_secret: agent_key_private }

  # cluster(kvm) settings
  cluster_user:
    type: string
    description: >
      Cluster user name.
    default: { get_secret: libvirt_cluster_user }

  cluster_key:
    type: string
    description: >
      SSH key for cluster user.
    default: { get_secret: libvirt_cluster_key }

  manager_network:
    type: string
    description: >
      Manager network.
    default: { get_secret: libvirt_common_network }

  cluster_host:
    type: string
    description: >
      LibVirt computer ip address.
    default: { get_secret: libvirt_cluster_host }

  external_ip:
    type: string
    description: >
      List external ip's separated by comma.
    default: { get_secret: libvirt_cluster_external_ip }

  external_dev:
    type: string
    description: >
      Device with external access (same device as used for cluster_host ip)
    default: { get_secret: libvirt_cluster_external_dev }

relationships:

  vm_connected_to_storage:
    derived_from: cloudify.relationships.depends_on
    target_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        preconfigure:
          implementation: scripts/vm_preconfigure.py
          executor: central_deployment_agent
          inputs: {}

node_types:

  agent_domain:
    derived_from: cloudify.nodes.WebServer
    properties:
      use_public_ip:
        default: false

node_templates:

  vm_download:
    type: cloudify.nodes.WebServer
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            fabric_env: &fab_env
              user: { get_input: cluster_user }
              key_filename: { get_input: cluster_key }
              host_string: { get_input: cluster_host }
            script_path: cluster/libvirt_install.sh
        configure:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            fabric_env: *fab_env
            script_path: scripts/download_vm.sh
            CATALOG_URL: https://cloud.centos.org/centos/7/images/
            DISK: CentOS-7-x86_64-GenericCloud-1805.qcow2

  common_network:
    type: cloudify.libvirt.network
    properties:
      libvirt_auth: &libvirt_auth
        concat:
         - "qemu+ssh://"
         - { get_input: cluster_user }
         - "@"
         - { get_input: cluster_host }
         - "/system?sshauth=privkey&keyfile="
         - { get_input: cluster_key }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            resource_id: { get_secret: libvirt_common_network }
            use_external_resource: true
    relationships:
    - target: vm_download
      type: cloudify.relationships.depends_on

  cloud_init:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        groups:
          - { get_input: agent_user }
        users:
          - name: { get_input: agent_user }
            # group with same name as username required for agent running
            primary_group: { get_input: agent_user }
            groups: wheel
            shell: /bin/bash
            sudo: ['ALL=(ALL) NOPASSWD:ALL']
            ssh-authorized-keys:
              - { get_input: agent_public_key }

  disk_clone:
    type: cloudify.nodes.ApplicationServer
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/disk_prepere.py
          executor: central_deployment_agent
          inputs:
            disk_image: { get_attribute: [vm_download, vm_image] }
            cloud_init: { get_attribute: [cloud_init, cloud_config ] }
            disk_size: { get_input: disk_size }
        configure:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            fabric_env: *fab_env
            script_path: scripts/copy_disk.py
        delete:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            fabric_env: *fab_env
            script_path: scripts/remove_disk.sh
    relationships:
    - target: vm_download
      type: cloudify.relationships.depends_on
    - target: cloud_init
      type: cloudify.relationships.depends_on

  base_vm:
    type: cloudify.libvirt.domain
    properties:
      libvirt_auth: *libvirt_auth
      agent_config:
        user: { get_input: agent_user }
        key: { get_input: agent_key_private }
        install_method: remote
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            params:
              vcpu: 2
              memory_size: 1048576
              domain_type: kvm
              networks:
                - network: { get_attribute: [common_network, resource_id] }
                  dev: vnet0
    relationships:
      - target: common_network
        type: cloudify.libvirt.relationships.connected_to
      - target: disk_clone
        type: vm_connected_to_storage

  floating_ip:
    type: cloudify.nodes.VirtualIP
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            fabric_env: *fab_env
            EXTERNAL_INTERFACE: { get_input: external_dev }
            EXTERNAL_IP: { get_input: external_ip }
            INTERNAL_IP: { get_attribute: [base_vm, ip] }
            script_path: cluster/floating_ip.py
        delete:
          implementation: fabric.fabric_plugin.tasks.run_script
          inputs:
            fabric_env: *fab_env
            script_path: cluster/floating_ip_delete.py
    relationships:
    - target: base_vm
      type: cloudify.relationships.connected_to

  qemu_vm:
    type: agent_domain
    properties:
      use_public_ip: true
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/vm_check.py
        configure:
          implementation: terminal.cloudify_terminal.tasks.run
          inputs:
            terminal_auth: &terminal_auth
              user: { get_input: agent_user }
              ip: { get_attribute: [SELF, ip] }
              key_content: { get_input: agent_key_private }
              port: 22
              promt_check:
                - '$'
            calls:
              # network fix
              - action: sudo ip link set dev eth0 mtu 1400
              - action: sudo yum install -y openssl-1.0.2k deltarpm
              # space fix
              - action: sudo sudo xfs_growfs /
        start:
          implementation: scripts/vm_fillip.py
          executor: central_deployment_agent
    relationships:
      - target: base_vm
        type: cloudify.relationships.contained_in
      - target: floating_ip
        type: cloudify.relationships.depends_on

groups:

  vm_scale:
    members:
      - disk_clone
      - base_vm
      - floating_ip
      - cloud_init
      - qemu_vm

policies:

  vm_scaling_policy:
    type: cloudify.policies.scaling
    properties:
      default_instances:  1
    targets: [vm_scale]
